"Loading polredabs";

function ramification_poly(phi);
            
        K:=CoefficientRing(phi);
        
        n:=Degree(phi);
        L:=ext<K|phi>;
        alpha:=L.1;
    
        Lx<x>:=PolynomialRing(L);
        rho:=Evaluate(phi,alpha*x + alpha) div (alpha^n); 
        rho:=Lx!rho;
        ChangePrecision(~rho,Precision(L));
    
        ramification_polygon := NewtonPolygon(rho);
      
        return ramification_polygon,rho;
end function;

function deformed_eisenstein(f, k, theta) 
          if theta eq 0 then 
            return f; 
          end if; 
          OKx<x> := Parent(f);
          OK := CoefficientRing(OKx);  
          L<alpha> := TotallyRamifiedExtension(OK,f);
          return CharacteristicPolynomial(alpha+theta*alpha^k);
end function;

declare verbose Monge, 6;

intrinsic MongeReduced(f::RngUPolElt) -> .
        {
        Return the set of Monge-reduced polynomials that generate an extensions isomorphic to the extensions generated by the Eisenstein polynomial f.
}
/*        
        EXAMPLES

        We Monge-reduce a polynomial,.

             R := pAdicRing(3,30); Rx<x> := PolynomialRing(R);
             f := x^18+249*x^3+486*x+30;
             M := MongeReduced(f);
             M;

        If the polynomial is Monge-reduced it does not change when reduced again::

             g := Representative(M);
             N := MongeReduced(g);
             M  eq  N;

        The Monge-reduction of a polynomial generating a tamely ramified extension::

             f := x^20+249*x^3+486*x+30;
             MongeReduced(f);

        The Monge-reduction of a polynomial generating a tamely ramified extension of large degree::

             f := x^90 + 249*x^81 + 486*x^18 + 30;
             MongeReduced(f);

        We use Monge reduction to verify that two polynomials generate isomorphic extensions

             R := pAdicRing(5,200); 
             Rx<x> := PolynomialRing(R);
             f := x^25 + 15625*x^4 + 5;
             g := x^25 + 5;
             MongeReduced(f) eq MongeReduced(g);

        Monge-reduction over an unramified extensions::

             R<g> := UnramifiedExtension(pAdicRing(2,30),2); Rx<x> := PolynomialRing(R);
             f := x^8 + 66*g*x^6 + 132*g*x + 258;
             MongeReduced(f);

        Monge reduction over a totally ramified extension::

             R := pAdicRing(3,10); Rx<x> := PolynomialRing(R);
             S<a> := ext<R|x^3+9*x+3>; Sy<y> := PolynomialRing(S);
             f := y^6+6*y^2+a;
             MongeReduced(f);

        AUTHORS:

        - Sebastian Pauli and Brian Sinclair (2017-07-20): initial Sage version
        - Sebastian Pauli (2024): Magma version

        REFERENCES:

        [Mon14] M. Monge, "A family of Eisenstein polynomials
          generating totally ramified extensions, identification of extensions and
          construction of class fields." International Journal of Number Theory
          (2014): 1-29.
*/

        if not IsEisenstein(f) then
            Error("only Eisenstein polynomials can be Monge-reduced");
        end if;
        
        vprint Monge,1:"Monge: reduction of",f;
        n := Degree(f);
        RT<x> := Parent(f);
        R := CoefficientRing(RT);
        p := Prime(R);
        pi := UniformizingElement(R);
        F, RtoF := ResidueClassField(R);
        Fp := PrimeField(F);
        FB := Basis(F,Fp);  
        Fi := {a:a in F|IsInvertible(a)};
        q := #F;
        Fs, Fsm := UnitGroup(F);
        xi := Fsm(Fs.1); // primitive element
        xiR := R!xi;
        Fz<z> := PolynomialRing(F);
        r := F.1;

//"##################";

        function elt_coefficient(alpha,k)
//"eltcoeff";
          w := 0;
          while alpha ne R!0 do
            v := Valuation(alpha);
            w +:= v;
            if w gt k then
//"eltcoeff end";
              return RtoF(0);
            end if;
            alpha := alpha/pi^v;
            albha := RtoF(alpha);
            // i := Index(rebs,albha);
            if albha ne 0 then i := Log(albha); rep := R!(xi^i);
            else rep := R!0; end if;
            if w eq k then
//"eltcoeff end";
              return albha;
            else
              //rep := reps[i];
              //rep := R!(xi^i);
              alpha := alpha-rep;
            end if;
          end while;
//"eltcoeff end";
          return RtoF(0);
        end function;


        //  reduction step 0 -- taking care of the constant coefficient
        
        phi0 := ConstantCoefficient(f);
        phi01 := RtoF(phi0 div pi^1);
        q := #F;
        a := Log(phi01);

        d, s0, _ := Xgcd(n,q-1); 
        k, b  := Quotrem(a,d);
        t0 := (-s0 * k) mod (q-1);
        c := (q-1) div d;
        M := {};
        t := t0;
        repeat
          t := (t+c) mod (q-1);
          theta := xi^(t);
          new_f := RT!([Coefficient(f,i)*R!theta^(n-i) : i in [0..n]]);
          Include(~M,new_f);
          vprint Monge,3: "Monge:   reducing f_(0,1) = ",phi01,"to",theta;
          vprintf Monge,2:"Monge:   now f_(0,1) = %o\n", RtoF(Coefficient(new_f,0) div pi);
          vprint Monge,5: "Monge:   test:",IsIsomorphic(new_f,f);
        until t eq t0; 

        rp, rho := ramification_poly(f);

        function hasse_herbrand(m)
//"hh";
          // Returns n times the (generalized) Hasse-Herbrand 
          // function of the ramification polygon R of an extension 
          // of degree n evaluated at m.
          h := Minimum([pt[2]+m*pt[1] : pt in Vertices(rp)]);
          return h;
        end function;

        function f_ij(f,m)
//"fij";
            lev := hasse_herbrand(m)+n;
            i := Integers()!lev  mod  n;
            j := Integers()!lev  div  n;
            fi := Coefficient(f,i);
            fij := elt_coefficient(fi,j);
            return fij, i, j;
        end function;

        J0 := Integers()!Vertices(rp)[1][2];
        a := J0 div n;
        b := J0 mod n;
        krasner_bound := 1+Floor(1+2*a+(2*b/n));   // bound on coefficents 
 
        function is_iso(S)
//"isiso";
          FB := Basis(F,Fp);  
          FL := [Eltseq(Evaluate(S,b)):b in FB];
          FM := Matrix(FL);
          return Rank(FM) eq #FB; 
        end function;
       
        function residual_polynomial_of_component(g,m)
          rp, rho := ramification_poly(g);
          KX<X> := Parent(rho);
          K<Pi> := CoefficientRing(KX);
          G, KtoG := ResidueClassField(K);
          rhom := Evaluate(rho,Pi^m*X);
          cont := Minimum([Valuation(a) : a in Coefficients(rhom)]);
          rdpc := rhom div Pi^cont;
          Sm := &+[z^i*KtoG(Coefficient(rdpc,i)): i in [0..Degree(rdpc)]];
          return Sm;
        end function;

        // for m high enough we can set coefficients to 0       

        rpslopes := LowerSlopes(rp);
        vprint Monge,4:"Monge: slopes of ramification polygon",rpslopes; 
        intslopes := [Floor(s):s in LowerSlopes(rp)];
        intslopes := [Floor(s):s in rpslopes];
        lastlev := Integers()!-Minimum(intslopes)+1;
        h := hasse_herbrand(lastlev);
        repeat
          lastlev := lastlev-1;
          prevh := h;
          h := hasse_herbrand(lastlev);
          Sm := residual_polynomial_of_component(f,lastlev);
          isoSm := is_iso(Sm);
          vprint Monge,4:"Monge: m =",lastlev,", HasseHerbrand(m) =",h," Sm is isomorphism",isoSm,":",Sm;
        until not isoSm or not prevh-h eq 1 or lastlev eq 0;
        //until not is_iso(Sm) or not hasse_herbrand(lastlev+1)-h eq 1 or lastlev eq 0;
        easystart := lastlev+1; 
        
        vprint Monge,1:"Monge: easy reduction starts with m =",easystart;

        function easyreduce(ff,m)
//"easy";
          repeat
            lev := hasse_herbrand(m)+n;
            albha, i, j := f_ij(ff,m);
            // k := Index(rebs,albha);
            if albha ne 0 then k := Log(albha); rep := R!(xi^k);
            else rep := R!0; end if;
            //rep := reps[k];
//"albha",alpha, "k",k, "rep",rep;
            //alpha := R!albha;
            //ff := (ff-rep*pi^j*x^i) mod pi^krasner_bound;
            vprintf Monge,6:"Monge:   m = %o : setting phi_(%o,%o) = %o to 0\n",m,i,j,albha;
            ff := (ff-rep*pi^j*x^i);
//"m",m,"ff",ff;
            m := m+1;
            vprintf Monge,6:"Monge:   still isomorphic %o\n", IsIsomorphic(ff,f);
          until j ge Precision(R);
          return ff;
        end function;

        // higher reduction steps

        //vprint Monge,4:"Monge: constant coefficient processed 1",M;
        M := {easyreduce(ff,easystart):ff in M};
        //vprint Monge,4:"Monge: constant coefficient processed 2",M;
        for m in [1..easystart-1] do
           vprintf Monge,2:"Monge: reduction with pi -> pi + theta * pi^%o\n",m;
           new_M := {};
           for ff in M do
              eta := -RtoF(ConstantCoefficient(ff) div pi);
              vprint Monge,2:"Monge:   reducing f =",ff;
              fij, i, j := f_ij(ff,m);
              vprint Monge,3:"Monge:   improving f_(",i,",",j,") =",fij;
              Sm  := residual_polynomial_of_component(ff,m);
              vprint Monge,3:"Monge:   Sm",Sm;
              FL := [Eltseq(Evaluate(eta^j*Sm,b)):b in FB];
              FM := Matrix(FL);
              alpha := fij;
             
              // reduce alpha by the image of eta^j*Sm 
              Mecho := EchelonForm(Matrix([Reverse(r): r in RowSequence(FM)]));
              vbeta := Vector(Reverse(Eltseq(alpha)));
              nu := 1;
              mu := 1;
              done := false;
              while nu le #FB and not done do // row counter
                while Mecho[nu][mu] eq 0 and not done do
                  if mu lt #FB then mu := mu + 1; else done := true; end if;
                end while;
                if not done then
                  vb := Vector(Mecho[nu]);
                  ab := vbeta[mu]/vb[mu];
                  vbeta := vbeta - ab*vb;
                  nu := nu + 1;
                end if;
              end while;
              beta := F!Reverse(Eltseq(vbeta));
//"eta",eta;
//"beta",beta;
//"alpha",alpha;
//"FM",FM;          
//"alpha-beta",alpha-beta;
              sol, kernel  := Solution(Matrix(FM),Vector(Eltseq(alpha-beta)));
              theta := F!Eltseq(sol);
              vprint Monge,3:"Monge:   theta",theta;
              Thetas := [theta+F!Eltseq(a):a in Set(Kernel(FM))];
              vprintf Monge,3:"Monge:   thetas %o\n",Thetas;
              new_ffs := {};
              for theta in Thetas do
                if theta eq 0 then
                  Include(~new_ffs,ff);
                else
                  vprint Monge,3:"Monge:     reduction with pi -> pi +",theta,"* pi ^",m+1;
                  def_ff := deformed_eisenstein(ff,m+1, (R!theta));
                  new_ff := easyreduce(def_ff,easystart);
                  vfij, vi, vj := f_ij(new_ff,m);
                  vprint Monge,2:"Monge:     now f_(",vi,",",vj,") =",vfij;
                  vprint Monge,3:"Monge:     reduced to",new_ff;
                  vprint Monge,5:"Monge:     test", IsIsomorphic(new_ff,f);
                  // alpha, i, j := f_ij(new_ff,m);
                  Include(~new_ffs,new_ff);
                end if;
              end for;
              new_M join:= new_ffs;
            end for;
            M := new_M;
          end for;
        return M;
end intrinsic;


intrinsic Expansion(f::RngUPolElt,nu::RngUPolElt) -> .
{
  The coefficients of the nu-expansion of f as a list.
}
  expansion := [];
  l := 0;
  repeat
    l +:= 1;
    a := f mod nu;
    Append(~expansion,a);
    f := (f-a) div nu;
  until f eq 0;
  return expansion;
end intrinsic;

intrinsic Contraction(L::SeqEnum,nu::RngUPolElt) -> .
{
  Contraction(Expansion(f,nu),nu) = f
}
  return &+[L[i]*nu^(i-1) : i in [1..#L]];
end intrinsic;

intrinsic IsMono(f::RngUPolElt) -> .
{true if the polynomial f is a monomial}
  R := CoefficientRing(f);
  mono := 1 eq &+[1: a in Eltseq(f) | a ne 0];
  if not mono then 
    return false; 
  elif R eq BaseRing(R) then 
    return mono;
  else 
    coeff := &+[a : a in Eltseq(f)];
    ret := 1 eq &+[1: a in Eltseq(coeff) | a ne 0];
    return ret;
  end if;
end intrinsic;


intrinsic String(f::RngUPolElt:nu:=0,wherenu:=false,Latex:=false) -> .
{
  The nu expansion of f as a string.
}
  //Zx<x> := PolynomialRing(Integers());

  if (nu eq 0 and IsEisenstein(f)) or IsEisenstein(f) then
    nu := Parent(f).1;
    if wherenu then wherenu := false; Latex := true; end if;
  elif nu eq 0 then
    _, nu, _ := EisensteinForm(f);
  end if;
 
  R := CoefficientRing(f);
  QR<a> := quo<R|UniformizingElement(R)^Precision(R)>;
  QRx<x> := PolynomialRing(QR);
 
  function tex(g)
    t := Sprintf("%O",QRx!g,"Latex");
    if IsMono(g) then 
      return t;
    else 
      return "(" cat t cat ")";
    end if;
  end function;

  nuexp := Expansion(f,nu);
  
  if wherenu then
    s := Sprintf("\\(\\nu^{%o} + ",#nuexp-1);
  elif Latex then
    s := Sprintf("\\(%o^{%o} + ",tex(nu),#nuexp-1);
  else 
    s := Sprintf("(%o)^%o + ",nu,#nuexp-1);
  end if;

  for j in [1..#nuexp-2] do
    i := #nuexp-j;
    if nuexp[i] ne 0 then
      if i eq 2 then
        if wherenu then
          s cat:= Sprintf("%o\\nu + ",tex(nuexp[2]));
        elif Latex then
          s cat:= Sprintf("%o %o + ",tex(nuexp[2]),tex(nu));
        else
          s cat:= Sprintf("(%o)*(%o) + ",QRx!nuexp[2],QRx!nu);
        end if;
      else
        if wherenu then
          s cat:= Sprintf("%o\\nu^{%o} + ",tex(nuexp[i]),i-1);
        elif Latex then
          s cat:= Sprintf("%o %o^{%o} + ",tex(nuexp[i]),tex(nu),i-1);
        else
          s cat:= Sprintf("(%o)*(%o)^%o + ",QRx!nuexp[i],QRx!nu,i-1);
        end if;
      end if;
    end if;
  end for;
  if wherenu then
    s cat:= Sprintf("%o\\) where \\(\\nu = %O\\)",tex(nuexp[1]),QRx!nu,"Latex");
  elif Latex  then
    s cat:= Sprintf("%o\\)",tex(nuexp[1]));
  else
    s cat:= Sprintf("%o",QRx!nuexp[1]);
  end if;
  return s;
end intrinsic;

intrinsic Expansion2(f::RngUPolElt,nu::RngUPolElt:limit:=0) -> .
{
  The nu-expansion of f such that its coefficients are given as p expansions and the nu-expansion of f.
}
  if limit eq 0 then limit := Precision(CoefficientRing(f)); end if;
  
  Zx<x> := PolynomialRing(Integers()); 
  nuexp := Expansion(f,nu);
  p := Prime(CoefficientRing(f));

  if not IsEisenstein(f) then
    expansion := [Zx!a : a in nuexp];
  else
    expansion := [Zx!Eltseq(ConstantCoefficient(a)): a in nuexp];
  end if;

  expexp := [];
  
  for g in expansion do
    h := g;
    gel := [];
    c := 0;
    while h ne 0 and c le limit do 
      Append(~gel,h mod p);
      h := h div p;
     c := c+1;
    end while;
    Append(~expexp,gel);
  end for;
  maxlen := Maximum([#gel:gel in expexp] cat [limit]); 
  for i in [1..#expexp] do 
    expexp[i] := expexp[i] cat [0:k in [1..maxlen-#expexp[i]+1]];
  end for; 
  return expexp, nuexp;
end intrinsic;

intrinsic Contraction2(L::SeqEnum,nu::RngUPolElt) -> .
{
  Contraction2(Expansion2(f,nu),nu) = f
}
  Rx<x> := Parent(nu);
  R := CoefficientRing(nu);
  p := Prime(R);
  
  return Rx!(&+[ &+[ p^(j-1)*L[i][j] : j in [1..#L[i]] ]*nu^(i-1) : i in [1..#L]]);
end intrinsic;

intrinsic Compare(f::RngUPolElt[FldFin],g::RngUPolElt[FldFin]) -> .
{
  Compare f(p) and g(p) where p is the characteristic of the coefficient ring of f and g.
}
  p := Characteristic(CoefficientRing(f));
  Z := Integers();
  Zx<x> := PolynomialRing(Z);
  Fx := Zx![a mod p : a in Coefficients(Zx!f)];
  Gx := Zx![a mod p : a in Coefficients(Zx!g)];
  F := Evaluate(Fx,p);
  G := Evaluate(Gx,p);
  return G-F;
end intrinsic;

intrinsic Distinguished(M::SetEnum[RngUPolElt[RngPad]]:nu:=0) -> .
{
  Given a set of reduced polynomials in Eisenstein form, return a distinguished polynomial.
} 
  Rx<x> := Parent(Rep(M));

  if nu eq 0 and IsEisenstein(Rep(M)) then
    D := ResidualPolynomialDistinguished(Rep(M));
"psi res",[<psi,ResidualPolynomialAbs(psi)>:psi in M];
    vprintf Monge,1: "Distinguished: residual polynomials %o\n",D;
    M := {psi:psi in M|ResidualPolynomialAbs(psi) eq D};
    nu := x;
  elif nu eq 0 then
    _, nu, _ := EisensteinForm(Rep(M));
  end if;

  L := SetToSequence(M);
  p := Prime(CoefficientRing(L[1]));
 
  function dcompare(f,g)
    fexp := Expansion2(f,nu);
    gexp := Expansion2(g,nu);
    for i in [1..#fexp] do
       for k in [1..#fexp[i]] do
          fik := fexp[i][k];
          gik := gexp[i][k];
          fcp := Evaluate(fik,p);
          gcp := Evaluate(gik,p);
          if fcp ne gcp then return fcp-gcp; end if;
       end for;
    end for;
    error "compare trouble";
    return 0;
  end function;

  Sort(~L, dcompare);
  return L[1];
end intrinsic;

intrinsic Compare(f::FldFinElt,g::FldFinElt) -> .
{
  Represent the finite field elements f and g by polynomials in the generator of the field over GF(p).
  Compare f(p) and g(p).
}
  Ft := PolynomialRing(Parent(f));
  return Compare(Ft!Eltseq(f),Ft!Eltseq(g));
end intrinsic;


intrinsic EisensteinForm(L::RngPad) -> .
{
  A generating polynomial of L over BaseRing(BaseRing(L)) in Eisenstein form. 
}
  vprintf Monge,3: "EisensteinForm of %o",L;

  if L eq PrimeRing(L) then
    error "EisensteinForm: L must be an extension of a local field.";
  end if;

  if IsUnramified(L) then
    return DefiningPolynomial(L), DefiningPolynomial(L), L.1;
  end if;

  if BaseRing(L) eq PrimeRing(L) then
    // L is totally ramified 
    return DefiningPolynomial(L), (PolynomialRing(BaseRing(L))).1, L.1;
  end if;

  pi := UniformizingElement(L);
  Lt<t> := PolynomialRing(L); 
  nu := DefiningPolynomial(BaseRing(L));
  gamma := Roots(Lt!nu-pi)[1][1];
  phi := CharacteristicPolynomial(gamma,BaseRing(BaseRing(L)));
  return phi, nu, gamma;
end intrinsic;


intrinsic EisensteinForm(f::RngUPolElt) -> .
{
  Given f in R[x] irreducible, return a polynomial g in Eisenstein form such that R[x]/(g) is isomorphic to R[x]/(f).
}

  if not IsMonic(f) then
    error "EisensteinForm:",f,"is not monic";
  end if;

  Rx<x> := Parent(f);
  R := CoefficientRing(f);
  p := Prime(R);
  
  vprintf Monge,3: "EisensteinForm of polynomial of degree %o over %o",Degree(f),R;

  if IsEisenstein(f) then
    L<a> := TotallyRamifiedExtension(R,f);
    if BaseRing(L) eq PrimeRing(L) then
      return f, x, L.1;
    else
      return EisensteinForm(L);
    end if;
  end if; 
  
  RR := ResidueClassField(R);
  RRz<x> := PolynomialRing(RR);
  if IsIrreducible(RRz!f) then
    U := UnramifiedExtension(R,Degree(f));
    Uy<y> := PolynomialRing(U);
    alpha := Roots(Uy!f)[1][1];
    return f, f, alpha;
  end if;

  fact, const, cert := Factorization(f:Certificates:=true);
  
  if #fact gt 1 then
    error "EisensteinForm: The polynomial",f,"is not irreducible";
  end if;

  F := cert[1]`F;
  if F gt 1 then
    U := UnramifiedExtension(R,F);
    Uy<y> := PolynomialRing(U);
    Ufact, const, Uext := Factorization(Uy!f:Extensions:=true);
//"ext",ext;
    L := Uext[1]`Extension;
    return EisensteinForm(L);
  end if;  

  fact, const, ext := Factorization(f:Extensions:=true);
  L := ext[1]`Extension;
  return EisensteinForm(L);
end intrinsic;

intrinsic IsEisensteinForm(phi::RngUPolElt) -> .
{true if phi is of Eisenstein form, false otherwise}
  if not IsMonic(phi) then return false; end if;
  K := CoefficientRing(phi);
  KX<X> := Parent(phi);
  k, m := ResidueClassField(K);
  kx<x> := PolynomialRing(k);
  num := kx!phi;
  fact := Factorization(num);
  if #fact ne 1 then return false;
  else nu := KX!fact[1][1]; end if;
//"nu",nu;
  nuexp := Expansion(phi,nu);
//"nuexp",nuexp;
  constval :=  Min([Valuation(a):a in Coefficients(nuexp[1])]);
//"constval",constval;
  leadval :=  Min([Valuation(a):a in Coefficients(nuexp[#nuexp])]);
  if constval ne 1 or leadval ne 0 then
     return false;
  end if;
//[[Valuation(a) gt 0 : a in Coefficients(C)]:C in nuexp];
//[&and[Valuation(a) gt 0 : a in Coefficients(C)]:C in nuexp];
  otherval := &and[&and[Valuation(a) gt 0 : a in Coefficients(nuexp[i])]:i in [1..#nuexp-1]];
//&and[&and[Valuation(a) gt 0 : a in Coefficients(c)]:c in nuexp];
//[[Valuation(a) gt 0 : a in Coefficients(nuexp[i])]:i in [1..#nuexp-1]];
//  [&and[Valuation(a) gt 0 : a in Eltseq(Coefficient(phi,i))]:i in [1..Degree(phi)-1]];
//:w
//"otherval",otherval;
  return otherval;
end intrinsic;

intrinsic RamificationPolyAbs(phi::RngUPolElt,alpha::RngPadElt) -> .
{Absolute ramification polygon and polynomial phi(alpha+x) of a polynomial phi in Eisenstein form,
where alpha is a root of phi.}

        L:=Parent(alpha);
        Lx<x> := PolynomialRing(L);
        rho:=Evaluate(phi,x + alpha); 
        ramification_polygon := NewtonPolygon(rho);
        return ramification_polygon,rho;
end intrinsic;

intrinsic RamificationPolyAbs(phi::RngUPolElt) -> .
{Absolute ramification polygon and polynomial phi(alpha+x) of a polynomial phi.}
        
        phi, nu, alpha := EisensteinForm(phi);
        return RamificationPolyAbs(phi,alpha);
end intrinsic;

intrinsic ResidualPolynomialOfComponentAbs(phi::RngUPolElt,nu::RngUPolElt,alpha::RngPadElt,m::RngIntElt) -> .
{
The residual polynomial of the segment of the ramfication polygon of phi of slope -m and the Hasse Herbrand function of phi at m.  alpha is a root of phi and nu(alpha) a uniformizing element in the extensions generated by alpha.}
          rp, rho := RamificationPolyAbs(phi,alpha);
          LX<X> := Parent(rho);
          L := CoefficientRing(LX);
          nualpha := Evaluate(nu,alpha);
          RL, LtoRL := ResidueClassField(L);
          RLz<z> := PolynomialRing(RL);
          rhom := Evaluate(rho,nualpha^m*X);
          cont := Minimum([Valuation(a) : a in Coefficients(rhom)]);
          rdpc := rhom div nualpha^cont;
          Sm := &+[z^i*LtoRL(Coefficient(rdpc,i)): i in [0..Degree(rdpc)]];
          return Sm, cont;
end intrinsic;

intrinsic ResidualPolynomialAbs(phi::RngUPolElt,nu::RngUPolElt,alpha::RngPadElt) -> .
{
The residual polynomials of the segments of the ramfication polygon of phi.
alpha is a root of phi and nu(alpha) a uniformizing element in the extensions generated by alpha.}
          rp, rho := RamificationPolyAbs(phi,alpha);
          LX<X> := Parent(rho);
          L := CoefficientRing(LX);
          nualpha := Evaluate(nu,alpha);
          RL, LtoRL := ResidueClassField(L);
          RLz<z> := PolynomialRing(RL);

          slopes := Reverse([-m:m in LowerSlopes(rp)]);
          vertices := Reverse(LowerVertices(rp));
          A := [];
          for l in [1..#slopes] do
            m := slopes[l];
            i := vertices[l][1];
            vri := vertices[l][2];
            j := Integers()!vertices[l+1][1];
            vrj := Integers()!vertices[l+1][2];
//<i,vri>,<j,vrj>;
//Parent(vrj);
            t := Numerator(m);
            d := Denominator(m);
//m,"=",t,"/",d;
//Coefficient(rho,Integers()!j);
            a := &+[LtoRL(Coefficient(rho,(k*d+j)) div nualpha^(vrj-k*t))*z^k: k in [0..Integers()!((i-j)/d)]];
            Append(~A,a);
          end for;
          return A;

          rhom := Evaluate(rho,nualpha^m*X);
          cont := Minimum([Valuation(a) : a in Coefficients(rhom)]);
          rdpc := rhom div nualpha^cont;
          Sm := &+[z^i*LtoRL(Coefficient(rdpc,i)): i in [0..Degree(rdpc)]];
          return Sm, cont;
end intrinsic;

intrinsic ResidualPolynomialAbs(phi) -> .
{
The residual polynomials of the segments of the ramfication polygon of phi.
}
  phi, nu, alpha := EisensteinForm(phi); 
  return ResidualPolynomialAbs(phi,nu,alpha);
end intrinsic;


intrinsic ResidualPolynomialClasses(phi::RngUPolElt:fix_phi01:=true) -> .
{The residual polynomial classes of an Eisenstein polynomial phi}
      Kx<x> := Parent(phi);
      K := CoefficientRing(phi);
      L<alpha> := TotallyRamifiedExtension(K,phi);
      rp, rho := RamificationPolyAbs(phi,alpha);
      slopes := Reverse(LowerSlopes(rp));
      RK, KtoRK := ResidueClassField(K);
      RKz<z> := PolynomialRing(RK);
      A := ResidualPolynomialAbs(phi,x,alpha);
      invA := {};
      e := Degree(phi);
      if fix_phi01 then
        Deltas := [r[1]:r in Roots(z^e-1)];
      else
        Deltas := RK;
      end if;
      for delta in Deltas do
        if delta ne 0 then
          t1 := Numerator(slopes[1]);
          d1 := Denominator(slopes[1]);
          gamma := delta^((d1-t1)*Degree(A[1]));
          Ak := [gamma*Evaluate(A[1],delta^(t1-d1)*z)];
          for i in [2..#slopes] do
              m := slopes[i];
              t := Numerator(m);
              d := Denominator(m);
              gamma := gamma*delta^((d-t)*Degree(A[i]));
              Append(~Ak,gamma*Evaluate(A[i],delta^(t-d)*z));
          end for;
          Include(~invA,Ak);
        end if;
      end for;
      return invA;
end intrinsic;


intrinsic ConwayCompare(f::RngUPolElt,g::RngUPolElt) -> .
{
Return 1 if f>g, -1 if f<g, 0 otherwise
}
  if Parent(f) ne Parent(g) then error "ConwayCompare: Polynomials must be over the same ring"; end if;
  
  Sf := Reverse(Eltseq(f));
  Lf := [Sf[i]*(-1)^(i-1):i in [1..#Sf]];
  Sg := Reverse(Eltseq(g));
  Lg := [Sg[i]*(-1)^(i-1):i in [1..#Sg]];
  
  if #Lf ne #Lg then error "ConwayCompare: Polynomials must be of the same degree"; end if;

  for i in [1..#Lf] do
    if IsPrimeField(CoefficientRing(f)) then
      if Integers()!Lf[i] gt Integers()!Lg[i] then
         return 1;
      elif Integers()!Lf[i] lt Integers()!Lg[i] then
         return -1;
      end if;
    else
      c := ConwayCompare(Lf[i],Lg[i]);
      if c ne 0 then return c; end if;
    end if;
  end for;
  return 0;
end intrinsic;

intrinsic ResidualPolynomialCompare(A,B) -> .
{
Return 1 if A>B, -1 if A<B, 0 otherwise
}
  if #A ne #B then error "ResidualPolynomialCompare: A and B must be of the same length."; end if;
  for i in [1..#A] do
    c := ConwayCompare(A[i],B[i]);
    if c ne 0 then return c; end if;    
  end for;  
  return 0;
end intrinsic;


intrinsic ResidualPolynomialDistinguished(phi:RngUPolElt) -> .
{
The distinguished (minimal) representative of the residual polynomial class of phi.
}
  As := SetToSequence(ResidualPolynomialClasses(phi)); 
//"ResidualPolynomialDistinguished all",As;  
  Sort(~As,func<x,y|ResidualPolynomialCompare(x,y)>);
"ResidualPolynomialDistinguished sorted",As;  
  return As[1];
end intrinsic;






function pol_red_padic_sub(Phi,nu,alpha)
       

        vprint Monge,5:"PolRedPadic: reduction of",String(Phi:nu:=nu);
        
        // these stay fixed

        n := Degree(Phi);
        f := Degree(nu);
        e := n div f;
        
        Zpx<x> := Parent(Phi);
        Zp := CoefficientRing(Zpx);
        
        p := Prime(Zp);
        q := p^f;
        
        Fp, ZptoFp := ResidueClassField(Zp);
        Fps, FpstoFp := UnitGroup(Fp);
        xi := FpstoFp(Fps.1); // primitive element
        xiZp := Zp!xi;
        Fpz<z> := PolynomialRing(Fp);

        L := Parent(alpha);
        Lt<t> := PolynomialRing(L);
        RL, LtoRL := ResidueClassField(L);
        Pi := Evaluate(nu,alpha);        
       
//"##################";

        function is_iso(S)
          FB := Basis(RL,Fp);  
          FL := [Eltseq(Evaluate(S,b)):b in FB];
          FM := Matrix(FL);
          return Rank(FM) eq #FB; 
        end function;

        // for m high enough we can set coefficients to 0       
       
        Wm := AssociativeArray(); // 'HasseHerbrand' of m, these do not change with phi
        rp, rho := RamificationPolyAbs(Phi,alpha);
        
        slopes := LowerSlopes(rp); // slopes := slopes[2..#slopes]; // remove infinite slope
        vprintf Monge,2: "PolRedPadic: Ramification polygon %o with slopes %o\n", LowerVertices(rp), slopes;
        intslopes := [Floor(s):s in slopes | Abs(s) lt Precision(Zp)];
        
        max_m := Integers()!-Minimum(intslopes)+1;
        m := max_m;
        Sm, pre_w := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,m);
        Wm[m] := pre_w;
        vprint Monge,2: "PolRedPadic: m =",m,", w(m) =",Wm[m],", Sm =",Sm;
        repeat
          pre_w := Wm[m];
          m := m-1;
          Sm, Wm[m] := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,m);
          vprint Monge,2: "PolRedPadic: m =",m,", w(m) =",Wm[m],", Sm =",Sm;
        until not is_iso(Sm) or not Wm[m+1]-Wm[m] eq 1 or Wm[m] eq 0;
        easystart := m+1; 
        easylimit := Wm[easystart] div e + 1;
        
        vprint Monge,1:"PolRedPadic: easy reduction starts with m =",easystart,"; i.e. modulo p ^",easylimit;
 
        function easyreduce(phi)
          m := easystart;
          nuexp := Expansion2(phi,nu : limit := easylimit);
          vprint Monge,4:"PolRedPadic:    easy reduction start m =",easystart," modulus p ^",easylimit;
          repeat
            def, wm := IsDefined(Wm,m);
            if not def then wm := Wm[max_m]+m-max_m; end if;
            i := wm mod e;
            k := wm div e;
            nuexp[i+1][k+1] := 0;
            vprintf Monge,2:"PolRedPadic:   m = %o : setting phi*_(%o,%o) = %o to 0\n",m,i,k,nuexp[i+1][k+1];
            //vprintf Monge,4:"PolRedPadic:   still isomorphic %o\n", HasRoot(Lt!Contraction2(nuexp,nu));
            m := m+1;
          until k gt easylimit or k ge Precision(Zp);
          //until k ge Precision(Zp) or m ge max_m+n;
          return Contraction2(nuexp,nu);
        end function;


        
        // reduction of tame part
        vprint Monge,2:"PolRedPadic: reduction with alpha -> alpha + theta * nu(alpha)";
        nuexp2, nuexp := Expansion2(Phi,nu : limit := easylimit);
        phi0 := nuexp[1];
        phi0alpha := Evaluate(phi0,alpha); 
        nualpha := Evaluate(nu,alpha);
        eta := LtoRL(nualpha^e/p);
        S1, r1 := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,1);
        S1eta := eta*S1;
        vprint Monge,2: "PolRedPadic: m = 1 , w(1) =",r1,", eta*S1 =",S1eta;
        phi01 := RL!Evaluate(nuexp2[1][2],alpha);
        
        function min01()
//"min01";
          S1eta01 := S1eta-phi01;
          for s in [0..q-2] do // bad when RL is big
            xis := xi^s;
            if xis ne 0 then
              roots := Roots(S1eta01+xis);
              if #roots gt 0 then
                return xis,[r[1]:r in roots];
              end if;
            end if;
          end for;
          error "min01 failed";
        end function;
/* simpler version seems to be faster
        function min01faster()
// "min01faster";
          S1eta01 := S1eta-phi01;
          a := Log(phi01);
          d, s0, _ := Xgcd(n,q-1);
          k, b  := Quotrem(a,d);
          t0 := (-s0 * k) mod (q-1);
          c := (q-1) div d;
          t := t0;
          tmin := t0;
          repeat
            t := (t+c) mod (q-1);   
            if t lt tmin then tmin := t; end if; 
          until t eq t0; 
          xis := xi^tmin-1;
          roots := Roots(S1eta01+xis);
          if #roots eq 0 then error "min01faster failed"; end if;
          return xis, [r[1]:r in roots];
        end function;
*/
        new01, Thetas := min01();
//"thetas",new01, Thetas;
        vprintf Monge,2:"PolRedPadic:   transforming phi*_(0,1) from %o to %o\n",phi01,new01;
//        time new01, Thetas := min01faster();
//"faster",new01,Thetas;
//        vprintf Monge,2:"++PolRedPadic:   transforming phi*_(0,1) from %o to %o\n",phi01,new01;
        //vprint Monge,2:"PolRedPadic:   thetas",Thetas;
        new_phis := {};
        for theta in Thetas do
          vprintf Monge,2:"PolRedPadic:     transformation alpha -> alpha + (%o)*nu(alpha)\n",theta;
          new_beta := alpha+(L!theta)*nualpha; 
          new_phi := CharacteristicPolynomial(new_beta,Zp);
          Include(~new_phis,<new_phi,new_beta>);
          vprint Monge,4:"PolRedPadic:     now phi*_(0,1) =",Expansion2(new_phi,nu)[1][2];
        end for;
        M := new_phis;
//return M;

        // other levels
        for m in [2..easystart] do
           vprintf Monge,2:"PolRedPadic: reduction with alpha -> alpha + theta * nu(alpha)^%o",m;
           new_M := {};
           for phiandbeta in M do
              phi := phiandbeta[1]; beta := phiandbeta[2];
              nuexp2, nuexp := Expansion2(phi,nu : limit := easylimit);
              
              phi0 := -nuexp[1];
              phi0beta := Evaluate(phi0,beta); 
              nubeta := Evaluate(nu,beta);
              eta := LtoRL(nubeta^e/p);
              //vprint Monge,5:"PolRedPadic:   reducing f =",String(phi:nu:=nu);
              Sm, wm := ResidualPolynomialOfComponentAbs(phi,nu,beta,m);
              i := wm mod e;
              k := wm div e;
              vprint Monge,2:"PolRedPadic:   m =",m,", w(m) =",wm,", eta =",eta,", Sm =",Sm;

              phisik := nuexp2[i+1][k+1];
              vprint Monge,2:"PolRedPadic:   improving phi*_(",i,",",k,") =",phisik;
              phisikbeta := LtoRL(Evaluate(phisik,beta));
              
              FB := Basis(RL,Fp);
              FL := [Eltseq(Evaluate(eta^k*Sm,b)):b in FB];
              FM := Matrix(FL);
             
              // reduce phisikbeta by the image of eta^j*Sm 
              Mecho := EchelonForm(Matrix([Reverse(r): r in RowSequence(FM)]));
              vdelta := Vector(Reverse(Eltseq(phisikbeta)));
              jB := 1;
              iB := 1;
              done := false;
              while iB le #FB and not done do // row counter
                while Mecho[iB][jB] eq 0 and not done do
                  if jB lt #FB then jB := jB + 1; else done := true; end if;
                end while;
                if not done then
                  vb := Vector(Mecho[iB]);
                  ab := vdelta[jB]/vb[jB];
                  vdelta := vdelta - ab*vb;
                  iB := iB + 1;
                end if;
              end while;
              delta := RL!Reverse(Eltseq(vdelta));
              // find coefficient for reduction
              sol, kernel  := Solution(Matrix(FM),Vector(Eltseq(phisikbeta-delta)));
              theta := RL!Eltseq(sol);
              //vprint Monge,2:"PolRedPadic:   theta",theta;
              Thetas := [theta+RL!Eltseq(a):a in Set(Kernel(FM))];
              //vprintf Monge,2:"PolRedPadic:   thetas %o\n",Thetas;
              new_phis := {};
              for theta in Thetas do
                vprintf Monge,2:"PolRedPadic:     transformation alpha -> alpha + (%o)*nu(alpha)^%o\n",theta,m;
                new_beta := beta+(L!theta)*nubeta^m;
                new_phi := CharacteristicPolynomial(new_beta,Zp);
                Include(~new_phis,<new_phi,new_beta>);
                vprint Monge,4:"PolRedPadic:     now phi*_(",i,",",k,") =",Expansion2(new_phi,nu)[i+1][k+1];
                //vprintf Monge,5:"PolRedPadic:     phi(beta) = phi(%o) = %o\n",new_beta,Evaluate(new_phi,new_beta);
              end for;
              new_M join:= new_phis;
            end for;
            M := new_M;
          end for;
        
        M := {easyreduce(phibeta[1]): phibeta in M};
        
        return M;

end function;


intrinsic PolRedPadic(Phi::RngUPolElt,nu::RngUPolElt,alpha) -> .
        {Phi in Zp[x] in Eisenstein Form, Phi(alpha)=0, nu(alpha) uniformizer of Qp(alpha), 
return all Monge reductions of Phi}

  Zpx<x> := Parent(Phi); 
  L := Parent(alpha);
  U := BaseRing(L);
  Uy<y> := PolynomialRing(U);  
  nu := DefiningPolynomial(U);
  pi := UniformizingElement(L);
  psi := DefiningPolynomial(L);

  Lt<t> := PolynomialRing(L); 
  gamma := Roots(Lt!nu-pi)[1][1];
  phi := CharacteristicPolynomial(gamma,BaseRing(U));

  gaut, maut := AutomorphismGroup(U);
  aut := [ maut(tau) : tau in gaut ];
  
  M := {};
  taupsis := {Uy![ tau(c): c in Coefficients(psi)]:tau in aut}; 
  for taupsi in taupsis do
    // need to consider all conjugates
    tauL := TotallyRamifiedExtension(U,taupsi);
    thisphi, nu, thisalpha := EisensteinForm(tauL);
    vprintf Monge,1:"PolRedPadic: processing conjugate %o\n",String(thisphi:nu:=nu);
    M join:= pol_red_padic_sub(thisphi,nu,thisalpha);
  end for;
  return M;
end intrinsic;

intrinsic PolRedPadic(Phi::RngUPolElt) -> .
{If Phi in K[x] is Eisenstein return the Monge reduction of Phi, where K/Qp is finite.
 If Phi in Zp[x] of Eisenstein Form return the generalized Monge reduction of Phi.}
    if IsEisenstein(Phi) then
      M := MongeReduced(Phi); 
      return M;
    else
//"not Eisen";
      vprintf Monge,2:"PolRedPadic: converting to Eisenstein form\n";
      phi, nu, alpha := EisensteinForm(Phi);
      vprintf Monge,2:"PolRedPadic: ramification index is %o and inertia degree is %o\n",Degree(phi)/Degree(nu),Degree(nu);
      return PolRedPadic(phi,nu,alpha);
    end if;
end intrinsic;
