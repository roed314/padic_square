"Loading polredabs";

function discrete_log(a)
  return Log(a);
end function;

declare verbose Monge, 6;

intrinsic IsEisensteinForm(phi::RngUPolElt) -> .
{
True, if phi is in Eisenstein form.
}
  K := CoefficientRing(phi);
  if K ne PrimeRing(K) then return false; end if;
  RK, KtoRK := ResidueClassField(K);
  Rphi := Polynomial(RK,phi);
  if Rphi eq 0 then return false; end if;
  Rfact := Factorization(Rphi);
  if #Rfact ne 1 then return false; end if;
  nu := Rfact[1][1];
  if not IsMonic(nu) then return false; end if;
  nuexp := Expansion(phi,Polynomial(K,nu));
  if Min([Valuation(a):a in Coefficients(nuexp[1])]) ne 1 then return false; end if;
  for i in [1..#nuexp-1] do
    if &or[Valuation(a) lt 1:a in Coefficients(nuexp[i])]  then return false; end if;
  end for;
  return true;
end intrinsic;



intrinsic EisensteinForm(L::RngPad) -> .
{
  A generating polynomial phi in K[x] of L in Eisenstein form along with 
  the polynomial nu generating the unramified subextensions of L/K and gamma with phi(gamma) = 0.
}
  vprintf Monge,3: "EisensteinForm of %o",L;
  K := BaseRing(L);
  if L eq PrimeRing(L) then
    error "EisensteinForm: L must be an extension of a local field.";
  end if;

  if IsUnramified(L) then
    return DefiningPolynomial(L), DefiningPolynomial(L), L.1;
  end if;

  if K eq PrimeRing(L) then
    // L is totally ramified 
    return DefiningPolynomial(L), (PolynomialRing(BaseRing(L))).1, L.1;
  end if;

  pi := UniformizingElement(L);
  Lt<t> := PolynomialRing(L); 
  nu := Polynomial(K,ConwayPolynomial(Prime(K),InertiaDegree(L,PrimeRing(L))));
  gamma := Roots(Lt!nu-pi)[1][1];
  phi := CharacteristicPolynomial(gamma,BaseRing(BaseRing(L)));
  return phi, nu, gamma;
end intrinsic;


intrinsic EisensteinForm(f::RngUPolElt[RngPad]) -> .
{
  Given f in R[x] irreducible, return a polynomial g in Eisenstein form such that Zp[x]/(g) is isomorphic to 
  the extension of Zp generated by f.
}

  if not IsMonic(f) then
    error "EisensteinForm:",f,"is not monic";
  end if;

  Kx<x> := Parent(f);
  K := CoefficientRing(f);
  p := Prime(K);
  Zp := PrimeRing(K);
  RK := ResidueClassField(K);
  RKz<z> := PolynomialRing(RK);
  vprintf Monge,3: "EisensteinForm of polynomial of degree %o over %o\n",Degree(f),K;

  if IsEisenstein(f) then
    vprintf Monge,3: "EisensteinForm: Eisenstein, ramified of degree %o\n",Degree(f); 
    L<pi> := TotallyRamifiedExtension(K,f);
    if BaseRing(L) eq Zp then
      return f, x, pi;
    elif InertiaDegree(K,Zp) eq Degree(K,Zp) then
      Lt<t> := PolynomialRing(L);
      U := BaseRing(L);
      nu := DefiningPolynomial(U);
      gamma := Roots(Lt!nu-pi)[1][1];
      phi := CharacteristicPolynomial(gamma,BaseRing(BaseRing(L)));
      return phi, nu, gamma;
    else
      return EisensteinForm(L);
    end if;
  end if; 
  
  if IsIrreducible(RKz!f) then
    vprintf Monge,3: "EisensteinForm: unramified of degree %o\n",Degree(f); 
    U := UnramifiedExtension(K,Degree(f));
    Uy<y> := PolynomialRing(U);
    alpha := Roots(Uy!f)[1][1];
    return f, f, alpha;
  end if;

  if IsEisensteinForm(f) then
    vprintf Monge,3: "EisensteinForm: already in Eisenstein form\n"; 
    RK, KtoRK := ResidueClassField(K);
    Rf := Polynomial(RK,f);
    Rfact := Factorization(Rf);
    Rnu := Rfact[1][1];
    vprintf Monge,3: "EisensteinForm: Eisenstein form with inertia degree %o and ramification index %o\n",Degree(Rnu),Degree(f)/Degree(Rnu);
    if Degree(Rnu) eq 1 then
      nu := Polynomial(K,Rnu);
      phi := Evaluate(f,x-ConstantCoefficient(nu));
      if not IsEisenstein(phi) then
        error "failure";
      end if;
      return EisensteinForm(phi);
    else
      nu := Polynomial(Zp,Rnu);
      U := UnramifiedExtension(K,nu);
      Uy<y> := PolynomialRing(U);
      _,_,Ls := Factorization(Uy!f:Extensions:=true); 
      alpha := Roots(Polynomial(Ls[1]`Extension,f))[1][1];
      return f, nu, alpha;
    end if;
  end if;

  fact, const, cert := Factorization(f:Certificates:=true);
  
  if #fact gt 1 then
    error "EisensteinForm: The polynomial is not irreducible:",f,"over",CoefficientRing(f);
  end if;

  F := cert[1]`F;
  if F gt 1 then
    U := UnramifiedExtension(K,F);
    Uy<y> := PolynomialRing(U);
    Ufact, const, Uext := Factorization(Uy!f:Extensions:=true);
    L := Uext[1]`Extension;
    return EisensteinForm(L);
  else
    fact, const, ext := Factorization(f:Extensions:=true);
    L := ext[1]`Extension;
    return EisensteinForm(L);
  end if;  
end intrinsic;

intrinsic Distinguished(M::SetEnum[RngUPolElt[RngPad]]:nu:=0) -> .
{
  Given a set of reduced polynomials in Eisenstein form, return a distinguished polynomial.
} 
  Rx<x> := Parent(Rep(M));

  if IsEisenstein(Rep(M)) then
    nu := x;
  elif nu eq 0 then
    _, nu, _ := EisensteinForm(Rep(M));
  end if;

  L := SetToSequence(M);
  p := Prime(CoefficientRing(L[1]));
 
  function dcompare(f,g)
    fexp := Expansion2(f,nu);
    gexp := Expansion2(g,nu);
    for i in [1..#fexp] do
       for k in [1..#fexp[i]] do
          fik := fexp[i][k];
          gik := gexp[i][k];
          fcp := Evaluate(fik,p);
          gcp := Evaluate(gik,p);
          if fcp ne gcp then 
            return fcp-gcp; 
          end if;
       end for;
    end for;
    error "compare trouble";
    return 0;
  end function;

  Sort(~L, dcompare);
  return L[1];
end intrinsic;




/////////////////////////////////////////////////////////////////////////
//Residual Polynomials

intrinsic ResidualPolynomialOfComponentAbs(phi::RngUPolElt,nu::RngUPolElt,alpha::RngPadElt,m::RngIntElt) -> .
{
The residual polynomial of the segment of the ramfication polygon of phi of slope -m and the Hasse Herbrand function of phi at m.  alpha is a root of phi and nu(alpha) a uniformizing element in the extensions generated by alpha.}
          rp, rho := RamificationPolyAbs(phi,alpha);
          LX<X> := Parent(rho);
          L := CoefficientRing(LX);
          nualpha := Evaluate(nu,alpha);
          RL, LtoRL := ResidueClassField(L);
          RLz<z> := PolynomialRing(RL);
          rhom := Evaluate(rho,nualpha^m*X);
          cont := Minimum([Valuation(a) : a in Coefficients(rhom)]);
          rdpc := rhom div nualpha^cont;
          Sm := &+[z^i*LtoRL(Coefficient(rdpc,i)): i in [0..Degree(rdpc)]];
          return Sm, cont;
end intrinsic;

intrinsic ResidualPolynomial(phi::RngUPolElt,nu::RngUPolElt,alpha::RngPadElt) -> .
{
The residual polynomials of the segments of the ramfication polygon of phi.
alpha is a root of phi and nu(alpha) a uniformizing element in the extensions generated by alpha.}
          rp, rho := RamificationPolyAbs(phi,alpha);
          LX<X> := Parent(rho);
          L := CoefficientRing(LX);
          nualpha := Evaluate(nu,alpha);
          RL, LtoRL := ResidueClassField(L);
          RLz<z> := PolynomialRing(RL);

          slopes := Reverse([-m:m in LowerSlopes(rp)]);
          vertices := Reverse(LowerVertices(rp));
          A := [];

          for l in [1..#slopes] do
            m := slopes[l];
            i := vertices[l][1];
            vri := vertices[l][2];
            j := Integers()!vertices[l+1][1];
            vrj := Integers()!vertices[l+1][2];
            t := Numerator(m);
            d := Denominator(m);
            a := &+[LtoRL(Coefficient(rho,(k*d+j)) div nualpha^(vrj-k*t))*z^k: k in [0..Integers()!((i-j)/d)]];
            Append(~A,a);
          end for;
          return A;

          rhom := Evaluate(rho,nualpha^m*X);
          cont := Minimum([Valuation(a) : a in Coefficients(rhom)]);
          rdpc := rhom div nualpha^cont;
          Sm := &+[z^i*LtoRL(Coefficient(rdpc,i)): i in [0..Degree(rdpc)]];
          return Sm, cont;
end intrinsic;


intrinsic ResidualPolynomial(phi:absolute:=false) -> .
{
The residual polynomials of the segments of the ramfication polygon of phi.
}

  if IsEisenstein(phi) then
    nu := Parent(phi)![0,1];
    K<alpha> := TotallyRamifiedExtension(CoefficientRing(phi),phi);
    return ResidualPolynomial(phi,nu,alpha);
  elif absolute then
    psi, nu, alpha := EisensteinForm(phi); 
    return ResidualPolynomial(psi,nu,alpha);
  else  
    _ , nu, alpha := EisensteinForm(phi); 
    pi := Evaluate(nu,alpha);
    psi := CharacteristicPolynomial(pi);
    K := CoefficientRing(psi);
    psi := ChangePrecision(psi,Precision(K));
    L := TotallyRamifiedExtension(K,psi);
    X := Polynomial(K,[0,1]);
    return ResidualPolynomial(psi,X,L.1);
  end if;
end intrinsic;

intrinsic ResidualPolynomialClasses(phi::RngUPolElt:with_trans:=false,conjugates:=false) -> .
{The residual polynomial classes of an Eisenstein polynomial phi}

      if not IsEisenstein(phi) then
        conjugates := true;
        _ , nu, alpha := EisensteinForm(phi); 
        pi := Evaluate(nu,alpha);
        phi := CharacteristicPolynomial(pi);
      end if;

      Kx<x> := Parent(phi);
      K := CoefficientRing(phi);
      RK, KtoRK := ResidueClassField(K);
      pi := UniformizingElement(K);
      n := Degree(phi);
      
      function residual_polynomial_classes_sub(phi,with_trans)
        invA := {};
        for delta in RK do
          if delta ne 0 then
            deltaK := K!delta;
            phidelta := Kx!([Coefficient(phi,i)*deltaK^(n-i) : i in [0..n]]);
            if with_trans then
              Include(~invA,<ResidualPolynomial(phidelta),phidelta,delta>);
            else
              Include(~invA,ResidualPolynomial(phidelta));
            end if;
          end if;
        end for;
        return invA;
      end function;

      if not conjugates then
        return residual_polynomial_classes_sub(phi,with_trans);
      else
        invA := {};
        gaut, maut := AutomorphismGroup(K);
        aut := [ maut(tau) : tau in gaut ];
        for tau in aut do
          vprintf Monge,1: "ResidualPolynomialClasses: %o |-> %o\n",KtoRK(K.1),KtoRK(tau(K.1));
          tauphi := Kx![ tau(c): c in Coefficients(phi)]; 
          invA join:= residual_polynomial_classes_sub(tauphi,with_trans);
        end for;
        return invA;
      end if;
end intrinsic;

intrinsic PolynomialCompareLog(f,g) -> .
{Compare two polynomials over a local field of the same degree by comparing the discrete logarithms of the coefficients and using lexicographic ordering with leading coefficient first.}
  if Degree(f) ne Degree(g) then error "ResidualPolynomialCompare: Polynomials must be of the same degree."; end if;
  for i := Degree(f) to 0 by -1 do
    a := Coefficient(f,i); b := Coefficient(g,i);
    if a eq 0 and b ne 0 then 
      return -1;
    elif b eq 0 and a ne 0 then 
      return 1;
    elif a ne 0 and b ne 0 and a ne b then
      c := discrete_log(a); d := discrete_log(b);
      return c-d;
    end if;
  end for;
  return 0;
end intrinsic;

intrinsic ResidualPolynomialCompare(A,B) -> .
{
Return 1 if A>B, -1 if A<B, 0 otherwise
}
  if #A ne #B then error "ResidualPolynomialCompare: Lists of residual polynomials must be of the same length."; end if;
  for i in [1..#A] do
    c := PolynomialCompareLog(A[i],B[i]);
    if c ne 0 then return c; end if;    
  end for;  
  return 0;
end intrinsic;

intrinsic ResidualPolynomialDistinguished(phi::RngUPolElt:conjugates:=false) -> .
{
The distinguished (minimal) representative of the residual polynomial class of an Eisenstein polynomial phi
along with the Eisenstein polynomials that yield th distinguished representative.
}
      if not IsEisenstein(phi) then
        conjugates := true;
        _ , nu, alpha := EisensteinForm(phi); 
        pi := Evaluate(nu,alpha);
        phi := CharacteristicPolynomial(pi);
      end if;

          K := CoefficientRing(phi);
          piK := UniformizingElement(K);
          Kx<x> := PolynomialRing(K);
          L<alpha> := TotallyRamifiedExtension(K,phi);
          rp, rho := RamificationPolyAbs(phi,alpha);
          slopes := Reverse([-m:m in LowerSlopes(rp)]);
          vertices := Reverse(LowerVertices(rp));
          Fq, KtoFq := ResidueClassField(K);
          Fqz<z> := PolynomialRing(Fq);
          q := #Fq;
          xi := PrimitiveElement(Fq);

      vprintf Monge, 4: "ResidualPolynomialDistinguished: %o with slopes %o\n",phi,slopes;  

        function residual_polynomial_distinguished_sub(phi);
          L<alpha> := TotallyRamifiedExtension(K,phi);
          LX<X> := PolynomialRing(L);
          slopes := Reverse([-m:m in LowerSlopes(rp)]);
          vertices := Reverse(LowerVertices(rp));
          A := ResidualPolynomial(phi);
          g := 0;
          Delta := 1;
          x_base := [0];
          for i in [1..#slopes] do
            n := Degree(A[i]);
            m := slopes[i];
            t := Numerator(m);
            d := Denominator(m);
            g := g+(d-t)*n;
            for j := n to 0 by -1 do
              Aij := Coefficient(A[i],j);
              vprintf Monge, 4: "ResidualPolynomialDistinguished: slope %o, %o-th monomial %o\n",slopes[i],j,Aij;
              if Aij ne 0 then
                a := discrete_log(Aij) mod (q-1);
                D := (Delta*((t-d)*j+g)) mod (q-1);
                if D ne 0 then 
                  b,s,_ := Xgcd(D,q-1);
                  new_Delta := Lcm(Delta,(q-1) div b);
                  minexp := q;
                  for xij in x_base do
                      J := a+xij*((t-d)*j+g);                    
                      r := J mod b;
                      k := J div b;
                      x := (xij-k*s*Delta) mod (q-1);
                      vprintf Monge, 2: "ResidualPolynomialDistinguished:    solutions %o + n*%o\n",x,Delta;  
                      if r lt minexp then
                        minexp := r;
                        new_x_base := [x];
                      elif r eq minexp then
                        Append(~new_x_base,x);
                      end if;
                  end for;
                  Delta := new_Delta;
                  x_base := new_x_base;
                end if;
              end if; 
            end for;
          end for;
          return x_base, Delta;
       end function;

       function residual_polynomial_phis(thisphi,s_base,s_diff)
          vprintf Monge, 2: "ResidualPolynomialDistinguished:    final difference: %o\n",s_diff;  
          minphis := [];
          for sb in s_base do
            s := sb;
            repeat
              s := (s+s_diff) mod (q-1);
              deltaK := K!(xi^s);
              phidelta := Kx!([Coefficient(thisphi,i)*deltaK^(Degree(thisphi)-i) : i in [0..Degree(thisphi)]]);
              Include(~minphis,<ResidualPolynomial(phidelta),phidelta>);
            until s eq sb; 
          end for;
          vprintf Monge, 4: "ResidualPolynomialDistinguished:    #phis = %o\n",#minphis;  
          return minphis;
       end function;

       if not conjugates then
         base, delta := residual_polynomial_distinguished_sub(phi);
         As := residual_polynomial_phis(phi,base,delta);
         phis := [a[2]: a in As | a[1] eq As[1][1]];
         return As[1][1],phis;
       else
         As := [];
         gaut, maut := AutomorphismGroup(K);
         aut := [ maut(tau) : tau in gaut ];
         for tau in aut do
           vprintf Monge,1: "ResidualPolynomialDistinguished: %o |-> %o\n",KtoFq(K.1),KtoFq(tau(K.1));
           tauphi := Kx![tau(c): c in Coefficients(phi)];
           base, delta := residual_polynomial_distinguished_sub(tauphi);
           As cat:= residual_polynomial_phis(tauphi,base,delta);
         end for;           
         Sort(~As,func<x,y|ResidualPolynomialCompare(x[1],y[1])>);
         vprint Monge, 2: "ResidualPolynomialDistinguished: sorted",[a[1] : a in As];  
       end if;
       philogs := [<discrete_log(KtoFq(ConstantCoefficient(a[2])/piK)),a[2]>: a in As | a[1] eq As[1][1]];
       minlog := Min([a[1] : a in philogs]);
       phis := [a[2]:a in philogs|a[1] eq minlog];
       return As[1][1],phis;
end intrinsic;

intrinsic Expansion(f::RngUPolElt,nu::RngUPolElt) -> .
{
  The coefficients of the nu-expansion of f as a list.
}
  expansion := [];
  l := 0;
  repeat
    l +:= 1;
    a := f mod nu;
    Append(~expansion,a);
    f := (f-a) div nu;
  until f eq 0;
  return expansion;
end intrinsic;

intrinsic Contraction(L::SeqEnum,nu::RngUPolElt) -> .
{
  Contraction(Expansion(f,nu),nu) = f
}
  return &+[L[i]*nu^(i-1) : i in [1..#L]];
end intrinsic;

intrinsic IsMono(f::RngUPolElt) -> .
{true if the polynomial f is a monomial}
  R := CoefficientRing(f);
  mono := 1 eq &+[1: a in Eltseq(f) | a ne 0];
  if not mono then 
    return false; 
  elif R eq BaseRing(R) then 
    return mono;
  else 
    coeff := &+[a : a in Eltseq(f)];
    ret := 1 eq &+[1: a in Eltseq(coeff) | a ne 0];
    return ret;
  end if;
end intrinsic;


intrinsic String(f::RngUPolElt:nu:=0,wherenu:=false,Latex:=false) -> .
{
  The nu expansion of f as a string.
}
  if (nu eq 0 and IsEisenstein(f)) or IsEisenstein(f) then
    nu := Parent(f).1;
    if wherenu then wherenu := false; Latex := true; end if;
  elif nu eq 0 then
    _, nu, _ := EisensteinForm(f);
  end if;
 
  R := CoefficientRing(f);
  QR<a> := quo<R|UniformizingElement(R)^Precision(R)>;
  QRx<x> := PolynomialRing(QR);
 
  function tex(g)
    t := Sprintf("%O",QRx!g,"Latex");
    if IsMono(g) then 
      return t;
    else 
      return "(" cat t cat ")";
    end if;
  end function;

  nuexp := Expansion(f,nu);
  
  if wherenu then
    s := Sprintf("\\(\\nu^{%o} + ",#nuexp-1);
  elif Latex then
    s := Sprintf("\\(%o^{%o} + ",tex(nu),#nuexp-1);
  else 
    s := Sprintf("(%o)^%o + ",nu,#nuexp-1);
  end if;
  for j in [1..#nuexp-2] do
    i := #nuexp-j;
    if nuexp[i] ne 0 then
      if i eq 2 then
        if wherenu then
          s cat:= Sprintf("%o\\nu + ",tex(nuexp[2]));
        elif Latex then
          s cat:= Sprintf("%o %o + ",tex(nuexp[2]),tex(nu));
        else
          s cat:= Sprintf("(%o)*(%o) + ",QRx!nuexp[2],QRx!nu);
        end if;
      else
        if wherenu then
          s cat:= Sprintf("%o\\nu^{%o} + ",tex(nuexp[i]),i-1);
        elif Latex then
          s cat:= Sprintf("%o %o^{%o} + ",tex(nuexp[i]),tex(nu),i-1);
        else
          s cat:= Sprintf("(%o)*(%o)^%o + ",QRx!nuexp[i],QRx!nu,i-1);
        end if;
      end if;
    end if;
  end for;
  if wherenu then
    s cat:= Sprintf("%o\\) where \\(\\nu = %O\\)",tex(nuexp[1]),QRx!nu,"Latex");
  elif Latex  then
    s cat:= Sprintf("%o\\)",tex(nuexp[1]));
  else
    s cat:= Sprintf("%o",QRx!nuexp[1]);
  end if;
  return s;
end intrinsic;

intrinsic Expansion2(f::RngUPolElt,nu::RngUPolElt:limit:=0) -> .
{
  The nu-expansion of f such that its coefficients are given as p expansions and the nu-expansion of f.
}
  if limit eq 0 then limit := Precision(CoefficientRing(f)); end if;
//"f",f,"nu",nu;  
  Zx<x> := PolynomialRing(Integers()); 
  nuexp := Expansion(f,nu);
  p := Prime(CoefficientRing(f));

  if not IsEisenstein(f) then
    expansion := [Zx!a : a in nuexp];
  else
    expansion := [Zx!Eltseq(ConstantCoefficient(a)): a in nuexp];
  end if;

  expexp := [];
  
  for g in expansion do
    h := g;
    gel := [];
    c := 0;
    while h ne 0 and c le limit do 
      Append(~gel,h mod p);
      h := h div p;
     c := c+1;
    end while;
    Append(~expexp,gel);
  end for;
  maxlen := Maximum([#gel:gel in expexp] cat [limit]); 
  for i in [1..#expexp] do 
    expexp[i] := expexp[i] cat [0:k in [1..maxlen-#expexp[i]+1]];
  end for; 
  return expexp, nuexp;
end intrinsic;

intrinsic Contraction2(L::SeqEnum,nu::RngUPolElt) -> .
{
  Contraction2(Expansion2(f,nu),nu) = f
}
  Rx<x> := Parent(nu);
  R := CoefficientRing(nu);
  p := Prime(R);
  
  return Rx!(&+[ &+[ p^(j-1)*L[i][j] : j in [1..#L[i]] ]*nu^(i-1) : i in [1..#L]]);
end intrinsic;


intrinsic RamificationPolyAbs(phi::RngUPolElt,alpha::RngPadElt) -> .
{Absolute ramification polygon and polynomial phi(alpha+x) of a polynomial phi in Eisenstein form,
where alpha is a root of phi.}

        L:=Parent(alpha);
        Lx<x> := PolynomialRing(L);
        rho:=Evaluate(phi,x + alpha); 
        ramification_polygon := NewtonPolygon(rho);
        return ramification_polygon,rho;
end intrinsic;

intrinsic RamificationPolyAbs(phi::RngUPolElt) -> .
{Absolute ramification polygon and polynomial phi(alpha+x) of a polynomial phi.}
//"EF 5";    
        phi, nu, alpha := EisensteinForm(phi);
        return RamificationPolyAbs(phi,alpha);
end intrinsic;

function pol_red_padic_sub(Phi,nu,alpha,psi01)
//"pol_red_padic psi01",psi01,"Parent(nu)",Parent(nu);
// Phi in K[x]
// nu in K[x] generates unramified subextension of L = K[x]/(Phi) = K(alpha)  
// Phi(alpha) = 0
// Phi01 desired constant coefficient mod pi^2
//"=======================================================";

        vprint Monge,5:"PolRedPadic: reduction of",String(Phi:nu:=nu);
        
        // these stay fixed

        n := Degree(Phi);
        f := Degree(nu);
        e := n div f;
        
        Zpx<x> := Parent(Phi);

        Zp := CoefficientRing(Zpx);
        p := Prime(Zp);
        q := p^f;
        Fp, ZptoFp := ResidueClassField(Zp);
        Fps, FpstoFp := UnitGroup(Fp);
        Fpz<z> := PolynomialRing(Fp);

        L := Parent(alpha);
        Lt<t> := PolynomialRing(L);
        RL, LtoRL := ResidueClassField(L);
        RLs, RLstoRL := UnitGroup(RL);
        psi01R := LtoRL(psi01);
        xi := RL.1; // primitive element
        Pi := Evaluate(nu,alpha);        
       
        function is_iso(S)
          FB := Basis(RL,Fp);  
          FL := [Eltseq(Evaluate(S,b)):b in FB];
          FM := Matrix(FL);
          return Rank(FM) eq #FB; 
        end function;

        // for m high enough we can set coefficients to 0       
       
        Wm := AssociativeArray(); // 'HasseHerbrand' of m, these do not change with phi
        rp, rho := RamificationPolyAbs(Phi,alpha);
        
        slopes := LowerSlopes(rp); // slopes := slopes[2..#slopes]; // remove infinite slope
        vprintf Monge,2: "PolRedPadic: Ramification polygon %o with slopes %o\n", LowerVertices(rp), slopes;
        intslopes := [Floor(s):s in slopes | Abs(s) lt Precision(Zp)];
        
        max_m := Integers()!-Minimum(intslopes)+1;
        m := max_m;
        Sm, pre_w := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,m);
        Wm[m] := pre_w;
        vprint Monge,2: "PolRedPadic: m =",m,", w(m) =",Wm[m],", Sm =",Sm;
        repeat
          pre_w := Wm[m];
          m := m-1;
          Sm, Wm[m] := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,m);
          vprint Monge,2: "PolRedPadic: m =",m,", w(m) =",Wm[m],", Sm =",Sm;
        until not is_iso(Sm) or not Wm[m+1]-Wm[m] eq 1 or Wm[m] eq 0;
        easystart := m+1; 
        easylimit := Wm[easystart] div e + 1;
        
        vprint Monge,1:"PolRedPadic: easy reduction starts with m =",easystart,"; i.e. modulo p ^",easylimit;
 
        function easyreduce(phi)
          m := easystart;
          nuexp := Expansion2(phi,nu : limit := easylimit);
          vprint Monge,4:"PolRedPadic: easy reduction start m =",easystart," modulus p ^",easylimit;
          repeat
            def, wm := IsDefined(Wm,m);
            if not def then wm := Wm[max_m]+m-max_m; end if;
            i := wm mod e;
            k := wm div e;
            nuexp[i+1][k+1] := 0;
            vprintf Monge,5:"PolRedPadic:   m = %o : setting phi*_(%o,%o) = %o to 0\n",m,i,k,nuexp[i+1][k+1];
            //vprintf Monge,4:"PolRedPadic:   still isomorphic %o\n", HasRoot(Lt!Contraction2(nuexp,nu));
            m := m+1;
          until k gt easylimit or k ge Precision(Zp);
          //until k ge Precision(Zp) or m ge max_m+n;
          newphi := Contraction2(nuexp,nu);
          return newphi;
        end function;
        
        // reduction of constant coefficient mod pi^2
        vprint Monge,2:"PolRedPadic: reduction with alpha -> alpha + theta * nu(alpha)";
        nuexp2, nuexp := Expansion2(Phi,nu : limit := easylimit);
        phi0 := nuexp[1];
        phi0alpha := Evaluate(phi0,alpha); 
        nualpha := Evaluate(nu,alpha);
        eta := LtoRL((nualpha^e) div p);
        S1, r1 := ResidualPolynomialOfComponentAbs(Phi,nu,alpha,1);
        S1eta := eta*S1;
        vprint Monge,1: "PolRedPadic: m = 1 , w(1) =",r1,", eta*S1 =",S1eta;
        phi01 := RL!Evaluate(nuexp2[1][2],alpha);
        
        new_phis := {};
        Thetas := [r[1]:r in Roots(S1eta-(phi01-psi01R))];
        vprintf Monge,2:"PolRedPadic:   transforming phi*_(0,1) from %o to %o\n",phi01,psi01R;
        if Thetas eq [] then
          error "PolRedPadic: reduction step slope -1 failed";
        end if;
        for theta in Thetas do
          vprintf Monge,2:"PolRedPadic:     transformation alpha -> alpha + (%o)*nu(alpha)\n",theta;
          new_beta := alpha+(L!theta)*nualpha; 
          new_phi := CharacteristicPolynomial(new_beta,Zp);
          Include(~new_phis,<new_phi,new_beta>);
          vprint  Monge,2:"PolRedPadic:     now phi*_(0,1) =",Evaluate(Expansion2(new_phi,nu)[1][2],xi);
          if not Evaluate(Expansion2(new_phi,nu)[1][2],xi) eq psi01R then
             error "PolRedPadic: reduction step m=1 failed";
          end if;
        end for;
        M := new_phis;

        // other levels
        for m in [2..easystart] do
           vprintf Monge,2:"PolRedPadic: m = %o, reduction with alpha -> alpha + theta * nu(alpha)^%o\n",m,m;
           new_M := {};
           for phiandbeta in M do
              phi := phiandbeta[1]; beta := phiandbeta[2];
              nuexp2, nuexp := Expansion2(phi,nu : limit := easylimit);
              
              phi0 := -nuexp[1];
              phi0beta := Evaluate(phi0,beta); 
              nubeta := Evaluate(nu,beta);
              eta := LtoRL(nubeta^e/p);
              vprint Monge,5:"PolRedPadic:   reducing f =",String(phi:nu:=nu);
              Sm, wm := ResidualPolynomialOfComponentAbs(phi,nu,beta,m);
              i := wm mod e;
              k := wm div e;
              vprint Monge,1:"PolRedPadic:   w(m) =",wm,", eta =",eta,", Sm =",Sm;

              phisik := nuexp2[i+1][k+1];
              vprint Monge,2:"PolRedPadic:   improving phi*_(",i,",",k,") =",phisik;
              phisikbeta := LtoRL(Evaluate(phisik,beta));
              
              FB := Basis(RL,Fp);
              FL := [Eltseq(Evaluate(eta^k*Sm,b)):b in FB];
              FM := Matrix(FL);
             
              // reduce phisikbeta by the image of eta^j*Sm 
              Mecho := EchelonForm(Matrix([Reverse(r): r in RowSequence(FM)]));
              vdelta := Vector(Reverse(Eltseq(phisikbeta)));
              jB := 1;
              iB := 1;
              done := false;
              while iB le #FB and not done do // row counter
                while Mecho[iB][jB] eq 0 and not done do
                  if jB lt #FB then jB := jB + 1; else done := true; end if;
                end while;
                if not done then
                  vb := Vector(Mecho[iB]);
                  ab := vdelta[jB]/vb[jB];
                  vdelta := vdelta - ab*vb;
                  iB := iB + 1;
                end if;
              end while;
              delta := RL!Reverse(Eltseq(vdelta));
              // find coefficient for reduction
              sol, kernel  := Solution(Matrix(FM),Vector(Eltseq(phisikbeta-delta)));
              theta := RL!Eltseq(sol);
              //vprint Monge,2:"PolRedPadic:   theta",theta;
              Thetas := [theta+RL!Eltseq(a):a in Set(Kernel(FM))];
              //vprintf Monge,2:"PolRedPadic:   thetas %o\n",Thetas;
              new_phis := {};
              for theta in Thetas do
                vprintf Monge,2:"PolRedPadic:     transformation alpha -> alpha + (%o)*nu(alpha)^%o\n",theta,m;
                new_beta := beta+(L!theta)*nubeta^m;
                new_phi := CharacteristicPolynomial(new_beta,Zp);
                Include(~new_phis,<new_phi,new_beta>);
                vprint Monge,4:"PolRedPadic:     now phi*_(",i,",",k,") =",Expansion2(new_phi,nu)[i+1][k+1];
                //vprintf Monge,5:"PolRedPadic:     phi(beta) = phi(%o) = %o\n",new_beta,Evaluate(new_phi,new_beta);
              end for;
              new_M join:= new_phis;
            end for;
            M := new_M;
          end for;
        
        M := {easyreduce(phibeta[1]): phibeta in M};
        return M;

end function;

intrinsic PolRedPadicTame(phi::RngUPolElt) -> .
{}
  K := CoefficientRing(phi);
  p := Prime(K);
  psi := DefiningPolynomial(K);
  e0 := Degree(phi);
  if (e0 mod p) eq 0 then
    error "PolRedPadicTame: ";
  end if;
  Kx<x> := PolynomialRing(K);
  pi := UniformizingElement(K);
  U, KtoU := ResidueClassField(K);
  xi := PrimitiveElement(U);
  phi0 := ConstantCoefficient(phi);
  phi01 := KtoU(phi0 div pi);
  l := discrete_log(phi01);
  b := Gcd(e0,#U-1);
  r := l mod b;
  return x^e0+pi*K!(xi^r);
end intrinsic;

intrinsic PolRedPadicTame(Phi::RngUPolElt,nu::RngUPolElt,alpha:distinguished:=true) -> .
{}
  K := CoefficientRing(Phi);
  Kx<x> := PolynomialRing(K);
  L := Parent(alpha);
  pi := UniformizingElement(K);
  p := Prime(L);
  phi := DefiningPolynomial(L);
  Lur<a> := CoefficientRing(phi);
  Lurx<x> := PolynomialRing(Lur);
  e0 := Degree(phi);

  gaut, maut := AutomorphismGroup(Lur);
  aut := [ maut(tau) : tau in gaut ];
  M := {};
  for tau in aut do
     vprintf Monge,1: "PolRedPadic: %o |-> %o\n",Lur.1,tau(Lur.1);
     tauphi := Lurx![tau(c): c in Coefficients(phi)];
     psi := PolRedPadicTame(tauphi);
     U, LurtoU := ResidueClassField(Lur);
     psi0 := ConstantCoefficient(psi);
     psi01 := LurtoU(psi0 div pi);
     psi01coeffs := Eltseq(psi01);
     Psi01 := Kx!psi01coeffs;
     Psi := Kx!nu^e0+Psi01*p;
     Include(~M,Psi);
  end for;
  if distinguished then
    return Distinguished(M:nu:=nu);
  else
    return M;
  end if;
end intrinsic;


intrinsic PolRedPadic(Phi::RngUPolElt,nu::RngUPolElt,alpha:distinguished:=true) -> .
        {Phi in Zp[x] in Eisenstein Form, Phi(alpha)=0, nu(alpha) uniformizer of Qp(alpha), 
return all Monge reductions of Phi}

  Zpx<x> := Parent(Phi); 
  Zp := CoefficientRing(Phi);
  L := Parent(alpha);
  RL, LtoRL := ResidueClassField(L);
  p := Prime(L);
  Lt<t> := PolynomialRing(L); 
  U := BaseRing(L);
  Uy<y> := PolynomialRing(U);  
  pi := UniformizingElement(L);
  psi := DefiningPolynomial(L);
  gamma := Roots(Lt!nu-pi)[1][1];
  phi := CharacteristicPolynomial(gamma,BaseRing(U));
  n := Degree(phi);
  A, psis := ResidualPolynomialDistinguished(psi:conjugates := true);
  vprint Monge,2:"PolRedPadic: ResidualPolynomialDistinguished",A;
  M := {};
  for psi in psis do
    thisphi, nu, thisalpha := EisensteinForm(psi);
    psi01 := Coefficient(psi,0) div p;
    newphis := pol_red_padic_sub(thisphi,Zpx!nu,thisalpha,psi01);
    M join:= newphis;
  end for;
  if distinguished then
    return Distinguished(M);
  else
    return M; 
  end if;
end intrinsic;

intrinsic PolRedPadic(Phi::RngUPolElt:distinguished:=true,monge:=true) -> .
{If Phi in K[x] is Eisenstein return the Monge reduction of Phi, where K/Qp is finite.
 If Phi in Zp[x] of Eisenstein Form return the generalized Monge reduction of Phi.}
    K := CoefficientRing(Phi);
    p := Prime(K);
      
      vprintf Monge,2:"PolRedPadic: converting to Eisenstein form\n";
      phi, nu, alpha := EisensteinForm(Phi);
      vprintf Monge,2:"PolRedPadic: ramification index is %o and inertia degree is %o\n",Degree(phi)/Degree(nu),Degree(nu);
      L := Parent(alpha);
      psi := DefiningPolynomial(L);
      if Degree(psi) mod p ne 0 then
        M := PolRedPadicTame(Phi,nu,alpha:distinguished:=distinguished);
      else
        M := PolRedPadic(phi,nu,alpha:distinguished:=distinguished);
      end if;
    return M;
end intrinsic;

intrinsic PolRedPadic(f::RngUPolElt,p::RngIntElt:prec:=300,distinguished:=true) -> .
{
The distinguished reduced generating polynomial of the extension generated by f over Zp. 
}
  Zp := pAdicRing(p,prec);
  ZpX<X> := PolynomialRing(Zp);
  Phi := ZpX!f;
  prec := Max(SuggestedPrecision(Phi),prec);
  Zp := pAdicRing(p,prec);
  ZpX<X> := PolynomialRing(Zp);
  Phi := ZpX!f;
  return PolRedPadic(Phi: distinguished:=distinguished);
end intrinsic;

