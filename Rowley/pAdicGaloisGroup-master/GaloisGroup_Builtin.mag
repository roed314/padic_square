declare type PGGAlg_GaloisGroup_Builtin: PGGAlg_GaloisGroup;

intrinsic PGGAlg_GaloisGroup_Builtin_Make() -> PGGAlg_GaloisGroup_Builtin
  {Calls Magma's builtin GaloisGroup intrinsic, which currently computes a splitting field explicitly.}
  alg := New(PGGAlg_GaloisGroup_Builtin);
  return alg;
end intrinsic;

intrinsic Print(alg :: PGGAlg_GaloisGroup_Builtin)
  {Print.}
  printf "builtin";
end intrinsic;

intrinsic TryGaloisGroup(alg :: PGGAlg_GaloisGroup_Builtin, f :: PGGPolStd) -> BoolElt, GrpPerm
  {The Galois group of f.}
  return true, GaloisGroup(Actual(f : FixPr));
end intrinsic;

intrinsic TryGaloisGroup(alg :: PGGAlg_GaloisGroup_Builtin, f :: PGGPolGrp) -> BoolElt, GrpPerm
  {"}
  G := GaloisGroup(f);
  return true, G;
end intrinsic;

