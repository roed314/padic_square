intrinsic TryGaloisGroup(alg :: PGGAlg_GaloisGroup_Builtin, f :: PGGPolExact) -> BoolElt, GrpPerm
  {"}
  case ExactpAdics_Implementation():
  when 1:
    ok, run := IsIntrinsic("ExactpAdics_ExecutePrecisionStrategy");
    assert ok;
    ok, getx := IsIntrinsic("BaselineApproximation");
    assert ok;
    ok, pr, G := run(function (pr)
      xf := getx(Actual(f), pr : FixPr);
      try
        G := GaloisGroup(xf);
      catch err
        return false, _;
      end try;
      if Degree(G) eq Degree(f) then
        return true, G;
      else
        return false, _;
      end if;
    end function, PrecisionStrategy(f));
    if ok then
      return true, G;
    else
      error "precision error";
    end if;
  when 2:
    ok, getx := IsIntrinsic("EpochApproximation");
    assert ok;
    for epoch in [1..99999] do
      xf := getx(Actual(f), epoch);
      try
        G := GaloisGroup(xf);
      catch err
        continue epoch;
      end try;
      if Degree(G) eq Degree(f) then
        return true, G;
      end if;
    end for;
  else
    assert false;
  end case;
end intrinsic;