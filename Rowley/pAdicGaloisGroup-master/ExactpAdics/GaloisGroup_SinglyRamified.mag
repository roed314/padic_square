intrinsic TryGaloisGroup(alg :: PGGAlg_GaloisGroup_SinglyRamified, f :: PGGPolExact) -> BoolElt, GrpPerm
  {The Galois group of f.}
  if not IsIrreducible(f) then
    return false, "f must be irreducible";
  end if;
  K := BaseRing(f);
  L := Extension(f);
  if #Faces(RamificationPolygon(Actual(L),Actual(K))) gt 1 then
    return false, "f must define a singly ramified extension";
  end if;
  case ExactpAdics_Implementation():
  when 1:
    ok, run := IsIntrinsic("ExactpAdics_ExectutePrecisionStrategy");
    assert ok;
    ok, getx := IsIntrinsic("BaselineApproximation");
    assert ok;
    ok, pr, G := run(function (pr)
      xf := getx(Actual(f), pr);
      try
        ok, G := TryGaloisGroup(alg, PolynomialRing(PGGFldStd_Make(BaseRing(xf)))!xf);
        return true, <ok, G>;
      catch err
        return false, _;
      end try;
    end function, PrecisionStrategy(f));
    if ok then
      return G[1], G[2];
    else
      error "precision error";
    end if;
  when 2:
    ok, getx := IsIntrinsic("EpochApproximation");
    assert ok;
    for epoch in [1..99999] do
      xf := getx(Actual(f), epoch);
      try
        ok, G := TryGaloisGroup(alg, PolynomialRing(PGGFldStd_Make(BaseRing(xf))) ! xf);
      catch err
        continue epoch;
      end try;
      return ok, G;
    end for;
  else
    assert false;
  end case;
end intrinsic;